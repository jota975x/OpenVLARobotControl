{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM1oKcqUFer1N7CX2UzFGNi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install pybullet"],"metadata":{"id":"hyMv_hKIWNfU","executionInfo":{"status":"ok","timestamp":1733713004403,"user_tz":300,"elapsed":8149,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"a737354e-e536-477d-edcc-92aaf66b2785","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pybullet\n","  Downloading pybullet-3.2.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (1.8 kB)\n","Downloading pybullet-3.2.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (103.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m103.2/103.2 MB\u001b[0m \u001b[31m11.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pybullet\n","Successfully installed pybullet-3.2.6\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"-PbJcOU2V8J7","executionInfo":{"status":"error","timestamp":1733713004493,"user_tz":300,"elapsed":100,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"da46da01-85da-4266-fef6-4644e58962a4"},"outputs":[{"output_type":"error","ename":"error","evalue":"Cannot load URDF file.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-7c0599365b33>\u001b[0m in \u001b[0;36m<cell line: 55>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     67\u001b[0m     \u001b[0mrobot_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muniform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m     \u001b[0mrobot_init_orientation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetQuaternionFromEuler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muniform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m     p.loadURDF(\n\u001b[0m\u001b[1;32m     70\u001b[0m         \u001b[0;34m'diff_drive_robot.urdf'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m         \u001b[0mbasePosition\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrobot_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrobot_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31merror\u001b[0m: Cannot load URDF file."]}],"source":["import pybullet as p\n","import pybullet_data\n","import math\n","import random\n","import numpy as np\n","import imageio\n","import csv\n","import os\n","\n","# Number of iterations\n","num_iterations = 1\n","\n","# Directory to save images\n","image_save_dir = \"InferenceTesting\"\n","os.makedirs(image_save_dir, exist_ok=True)\n","\n","# Connect in DIRECT mode (no GUI)\n","p.connect(p.DIRECT)\n","p.setAdditionalSearchPath(pybullet_data.getDataPath())\n","\n","# Common camera parameters\n","cam_target = [0, 0, 0]\n","cam_distance = 15\n","cam_yaw = 0\n","cam_pitch = -60\n","cam_roll = 0\n","cam_upAxisIndex = 2\n","width = 1280\n","height = 960\n","\n","view_matrix = p.computeViewMatrixFromYawPitchRoll(\n","    cameraTargetPosition=cam_target,\n","    distance=cam_distance,\n","    yaw=cam_yaw,\n","    pitch=cam_pitch,\n","    roll=cam_roll,\n","    upAxisIndex=cam_upAxisIndex\n",")\n","\n","projection_matrix = p.computeProjectionMatrixFOV(\n","    fov=45,\n","    aspect=1.0,\n","    nearVal=0.1,\n","    farVal=100.0\n",")\n","\n","obj_files = [\"dog.obj\", \"beach_ball.obj\", \"cow.obj\", \"pineapple.obj\", \"cat.obj\"]\n","base_path = \"./obj_files/\"  # Adjust if needed\n","min_distance = 1  # Minimum distance between objects\n","num_barriers = 10\n","\n","# Collect all data in memory first for speed\n","all_data = []  # Each entry: [iteration, object_name, x, y]\n","\n","for i in range(num_iterations):\n","    # Reset simulation each iteration\n","    p.resetSimulation()\n","    p.setPhysicsEngineParameter(numSolverIterations=10)\n","    p.setTimeStep(1.0 / 120.0)\n","    p.setGravity(0, 0, -9.8)\n","\n","    # Load a plane\n","    p.loadURDF(\"plane.urdf\")\n","\n","    # Randomize and load one robot\n","    robot_x = random.uniform(-2, 2)\n","    robot_y = random.uniform(-2, 2)\n","    robot_init_orientation = p.getQuaternionFromEuler([0, 0, random.uniform(0, 2*math.pi)])\n","    p.loadURDF(\n","        'diff_drive_robot.urdf',\n","        basePosition=[robot_x, robot_y, 0],\n","        baseOrientation=robot_init_orientation\n","    )\n","\n","    # Randomly place objects\n","    object_positions = {}\n","    for obj_file in obj_files:\n","        while True:\n","            # Randomize placement\n","            random_radius = random.uniform(3, 5)\n","            random_angle = random.uniform(0, 2 * math.pi)\n","            x = random_radius * math.cos(random_angle)\n","            y = random_radius * math.sin(random_angle)\n","\n","            # Check distance to previously placed objects\n","            valid_position = True\n","            for _, info in object_positions.items():\n","                existing_x, existing_y = info[\"position\"]\n","                distance = math.sqrt((x - existing_x)**2 + (y - existing_y)**2)\n","                if distance < min_distance:\n","                    valid_position = False\n","                    break\n","\n","            if valid_position:\n","                break\n","\n","        # Adjust scale if it's the phone\n","        if obj_file == \"cat.obj\":\n","            meshScale = [0.01, 0.01, 0.01]\n","        elif obj_file == \"beach_ball.obj\":\n","            meshScale = [0.01, 0.01, 0.01]\n","        else:\n","            meshScale = [0.02, 0.02, 0.02]\n","\n","        # Create object\n","        visualShapeId = p.createVisualShape(\n","            shapeType=p.GEOM_MESH,\n","            fileName=base_path + obj_file,\n","            specularColor=[0.1, 0.1, 0.1],\n","            visualFramePosition=[0, 0, 0],\n","            meshScale=meshScale\n","        )\n","\n","        collisionShapeId = p.createCollisionShape(\n","            shapeType=p.GEOM_MESH,\n","            fileName=base_path + obj_file,\n","            collisionFramePosition=[0, 0, 0],\n","            meshScale=meshScale\n","        )\n","\n","        objectUniqueId = p.createMultiBody(\n","            baseMass=1,\n","            baseInertialFramePosition=[0, 0, 0],\n","            baseCollisionShapeIndex=collisionShapeId,\n","            baseVisualShapeIndex=visualShapeId,\n","            basePosition=[x, y, 0],\n","            baseOrientation=p.getQuaternionFromEuler([0, 0, random.uniform(0, 2*math.pi)]),\n","            useMaximalCoordinates=True\n","        )\n","\n","        # Optional: change visual shape color if needed\n","        p.changeVisualShape(\n","            objectUniqueId,\n","            linkIndex=-1,\n","            rgbaColor=[0.7, 0.7, 0.7, 1.0]\n","        )\n","\n","        # Store position (just x,y)\n","        object_positions[obj_file] = {\n","            \"position\": (x, y)\n","        }\n","\n","    # Insert random barriers\n","    barrier_positions = []\n","    for _ in range(num_barriers):\n","        while True:\n","            random_x = random.uniform(-5, 5)\n","            random_y = random.uniform(-5, 5)\n","            valid_position = True\n","\n","            # Check against barriers\n","            for bx, by in barrier_positions:\n","                if math.sqrt((random_x - bx)**2 + (random_y - by)**2) < min_distance:\n","                    valid_position = False\n","                    break\n","\n","            # Check against objects\n","            for _, info in object_positions.items():\n","                existing_x, existing_y = info[\"position\"]\n","                if math.sqrt((random_x - existing_x)**2 + (random_y - existing_y)**2) < min_distance:\n","                    valid_position = False\n","                    break\n","\n","            if valid_position:\n","                break\n","\n","        barrier_positions.append((random_x, random_y))\n","        p.createMultiBody(\n","            baseMass=0,\n","            baseInertialFramePosition=[0, 0, 0],\n","            baseCollisionShapeIndex=p.createCollisionShape(p.GEOM_BOX, halfExtents=[0.2, 0.2, 0.5]),\n","            baseVisualShapeIndex=p.createVisualShape(p.GEOM_BOX, halfExtents=[0.2, 0.2, 0.5], rgbaColor=[0.5, 0.5, 0.5, 1.0]),\n","            basePosition=[random_x, random_y, 0.5],\n","            baseOrientation=p.getQuaternionFromEuler([0, 0, 0])\n","        )\n","\n","    # Minimal simulation steps to allow objects to settle (tune this as needed)\n","    for _ in range(10):\n","        p.stepSimulation()\n","\n","    # Capture camera image with GPU renderer if available\n","    _, _, img_arr, _, _ = p.getCameraImage(\n","        width=width,\n","        height=height,\n","        viewMatrix=view_matrix,\n","        projectionMatrix=projection_matrix,\n","        renderer=p.ER_BULLET_HARDWARE_OPENGL\n","    )\n","\n","    rgb_array = np.reshape(img_arr, (height, width, 4))\n","\n","    # Save the image\n","    image_filename = os.path.join(image_save_dir, f\"image_{i}.png\")\n","    imageio.imwrite(image_filename, rgb_array)\n","\n","    # Store object positions\n","    for obj_name, info in object_positions.items():\n","        x, y = info[\"position\"]\n","        all_data.append([i, obj_name, x, y])\n","\n","# After all iterations, write out CSV once\n","csv_filename = \"object_positions.csv\"\n","with open(csv_filename, mode='w', newline='') as csvfile:\n","    writer = csv.writer(csvfile)\n","    writer.writerow([\"iteration\", \"object_name\", \"x\", \"y\"])\n","    for row in all_data:\n","        writer.writerow(row)\n","\n","p.disconnect()\n"]},{"cell_type":"code","source":[],"metadata":{"id":"r7RRxxstWCto"},"execution_count":null,"outputs":[]}]}